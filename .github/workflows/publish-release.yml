name: Publish release

on:
  release:
    types: [created]

jobs:
  build:
    name: Publish Hammer on ${{matrix.buildname}}
    runs-on: ${{matrix.os}}
    if: github.repository == 'health-validator/Hammer'
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-10.15
            buildname: 'macos'
            qt-version: '5.15.1-7fc8b10'
            dotnet-platform: 'osx-x64'
            dotnet-version: 'net5.0'
            deployment-platform: 'macos'
          - os: windows-2019
            buildname: 'windows'
            qt-version: '5.15.1-7fc8b10'
            dotnet-platform: 'win-x64'
            dotnet-version: 'net5.0'
            deployment-platform: 'windows'

    env:
      buildtype: Release
      TAG_NAME: ${{github.event.release.tag_name}}
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true

    steps:
    - name: Validate release version
      shell: powershell
      run: |
        # Validate that the version used in the release is one that'll work with all of our tooling
        # Squirrel can be picky: https://github.com/Squirrel/Squirrel.Windows/issues/1394

        if ($env:TAG_NAME -match "^Hammer-(?<Version>\d+(\s*\.\s*\d+){0,3})(?<Release>-[a-z][0-9a-z-]*)?$") {
          $SHORT_TAG_NAME = $Matches.Version
        } else {
          echo "$env:TAG_NAME isn't a valid release name - make sure it matches Hammer-#.#.#"
          exit 1
        }

        echo "SHORT_TAG_NAME=${SHORT_TAG_NAME}" >> $env:GITHUB_ENV

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v2.1.1
      with:
        dotnet-version: 5.0.x

    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Restore maven cache
      uses: actions/cache@v3.0.7
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Clone Java validator
      run: git clone --depth 1 --shallow-submodules https://github.com/health-validator/org.hl7.fhir.core

      # build Java first as it's needed by .NET for copying into the publish folder
    - name: Build Java validator
      shell: bash
      run: |
        cd org.hl7.fhir.core
        echo "Git revision of the validator code: $(git rev-parse HEAD)"
        mvn package -Dmaven.test.skip=true --projects org.hl7.fhir.validation.cli --no-transfer-progress
        mv org.hl7.fhir.validation.cli/target/org.hl7.fhir.validation.cli*-SNAPSHOT.jar $GITHUB_WORKSPACE/org.hl7.fhir.validator.jar

        # validate Java validator works
        cd $GITHUB_WORKSPACE
        java -jar org.hl7.fhir.validator.jar

    - name: Update version & appmodel files
      shell: powershell
      run: |
        $csproj = "Hammer.csproj"
        $regex = '<Version>.+?<\/Version>'
        $replacement = "<Version>$env:SHORT_TAG_NAME</Version>"
        (Get-Content $csproj -Raw) -replace $regex, $replacement | Set-Content $csproj

        (Get-Content "Main.qml" -Raw) -replace "// import appmodel 1.0", "import appmodel 1.0" | Set-Content "Main.qml"

    - name: (macOS) Build Hammer
      if: runner.os == 'macOS'
      run: |
        dotnet restore --runtime=${{matrix.dotnet-platform}}
        dotnet msbuild -p:Configuration=${{env.buildtype}} -t:BundleApp -p:RuntimeIdentifier=${{matrix.dotnet-platform}} -p:UseAppHost=true

    - name: (Windows) Build Hammer
      if: runner.os == 'Windows'
      run: |
        dotnet publish --configuration ${{env.buildtype}} --runtime ${{matrix.dotnet-platform}}

    - name: (Windows) Trim createdump
      if: runner.os == 'Windows'
      shell: bash
      run: |
        # squirrel gets confused about which executable (Hammer.exe or createdump.exe)
        # is right one launch after installing. Marking as Hammer.exe as squirrel-aware
        # isn't possible until https://github.com/Squirrel/Squirrel.Windows/pull/1692 is in
        # and removing createdump.exe from the output is not possible until
        # https://github.com/dotnet/runtime/issues/43716 is in.
        # For the time being, hack it out ourselves
        jqi() {
          cat <<< "$(jq "$1" < "$2")" > "$2"
        }
        jqi "del(..|.\"createdump.exe\"?)" bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/Hammer.deps.json
        rm -f bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/createdump.exe

    - name: Download runtime
      shell: bash
      run: |
        curl --location --output qt-runtime.tar.gz https://github.com/qmlnet/qt-runtimes/releases/download/releases/qt-${{matrix.qt-version}}-${{matrix.dotnet-platform}}-runtime.tar.gz

    - name: (macOS) Extract runtime
      shell: bash
      if: runner.os == 'macOS'
      run: |
        mkdir -p bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/Hammer.app/Contents/MacOS/qt-runtime
        tar -xf qt-runtime.tar.gz -C bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/Hammer.app/Contents/MacOS/qt-runtime

        # trim unnecessary Tools folder (containing only Conan support)
        rm -rf bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/Hammer.app/Contents/MacOS/qt-runtime/Tools

        # clean up the publish folder, leaving the .app only
        cd bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish
        mv Hammer.app /tmp/Hammer.app
        rm -rf *
        cp -r /tmp/Hammer.app .

    - name: (Windows/Linux) Extract runtime
      shell: bash
      if: runner.os == 'Windows' || runner.os == 'Linux'
      run: |
        mkdir -p bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/qt-runtime
        tar -xf qt-runtime.tar.gz -C bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/qt-runtime

        # trim unnecessary Tools folder (containing only Conan support)
        rm -rf bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/Hammer.app/Contents/MacOS/qt-runtime/Tools

    - name: (macOS) Sign the app
      shell: bash
      if: runner.os == 'macOS' && false
      env:
        MACOS_SIGNING_PASS: ${{secrets.MACOS_SIGNING_PASS}}
        AC_USERNAME: ${{secrets.APPLE_USERNAME}}
        AC_PASSWORD: ${{secrets.APPLE_PASSWORD}}
      run: |
        brew tap mitchellh/gon
        brew install mitchellh/gon/gon

        KEYCHAIN=build.keychain
        security create-keychain -p travis $KEYCHAIN
        security default-keychain -s $KEYCHAIN
        security unlock-keychain -p travis $KEYCHAIN
        security set-keychain-settings -t 3600 -u $KEYCHAIN
        security import assets/code-signing-certificate-macos.p12 -k $KEYCHAIN -P "$MACOS_SIGNING_PASS" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k travis $KEYCHAIN
        export IDENTITY="Developer ID Application"
        echo "Imported identity:"
        security find-identity
        echo "----"

        cd bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish

        pip3 install macholib
        python3 $GITHUB_WORKSPACE/assets/fix_app_qt_folder_names_for_codesign.py "Hammer.app"
        codesign --deep -o runtime -s "$IDENTITY" "Hammer.app"
        echo "Signed final .dmg"

        cat << EOF > gon.json
        {
          "notarize": [{
            "path": "./Hammer.app/Contents/macOS/Hammer",
            "bundle_id": "hammer",
            "staple": true
          }]
        }
        EOF

        gon gon.json

        security delete-keychain $KEYCHAIN

    - name: Zip up artifact
      shell: bash
      run: cd bin/Release/${{matrix.dotnet-version}}/${{matrix.dotnet-platform}}/publish/ && 7z a -tzip $GITHUB_WORKSPACE/publish/Hammer-${{matrix.deployment-platform}}.zip

    - name: (Windows) Upload stand-alone zip
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: Hammer-${{env.SHORT_TAG_NAME}}-windows-installerfree.zip
        asset_path: ${{github.workspace}}\publish\Hammer-${{matrix.deployment-platform}}.zip
        asset_content_type: application/zip

    - name: (Windows) Build installer
      if: runner.os == 'windows'
      shell: powershell
      env:
        WORKSPACE: ${{runner.workspace}}
        WORKSPACEGIT: ${{runner.workspace}}\Hammer
        WINDOWS_CODE_SIGNING: ${{secrets.WINDOWS_CODE_SIGNING}}
      run: |
        $SQUIRRELWIN = "$env:WORKSPACE\squirrel-packaging-prep"
        $SQUIRRELWINBIN = "$SQUIRRELWIN\lib\net45\"
        $RELEASEDIR = "$env:WORKSPACE\finished-installer"
        if (-not $(Test-Path "$SQUIRRELWINBIN")) {
          New-Item "$SQUIRRELWINBIN" -ItemType "directory"
        }
        Move-Item bin\Release\${{matrix.dotnet-version}}\${{matrix.dotnet-platform}}\publish\* $SQUIRRELWINBIN
        Copy-Item $env:WORKSPACEGIT\assets\hammer-logo.png $SQUIRRELWIN
        $Script:NuSpec = "$env:WORKSPACEGIT\Hammer.nuspec"

        nuget pack "$Script:NuSpec" -Version "$env:SHORT_TAG_NAME" `
          -BasePath $SQUIRRELWIN -OutputDirectory $SQUIRRELWIN

        $Script:NupkgPath = "$SQUIRRELWIN\Hammer.$env:SHORT_TAG_NAME.nupkg"
        if (-not (Test-Path -Path $Script:NupkgPath -PathType Leaf)) {
          echo "ERROR: nupkg doesn't exist as expected! Build aborted."
          exit 1
        }

        nuget install squirrel.windows -ExcludeVersion -Verbosity quiet

        echo "Generating installer..."
        .\squirrel.windows\tools\Squirrel `
          --releasify $Script:NupkgPath `
          --releaseDir $RELEASEDIR --no-msi `
          --loadingGif=$env:WORKSPACEGIT\assets\hammer-windows-install.png `
          --setupIcon $env:WORKSPACEGIT\assets\hammer-logo.ico `
          --signWithParams="/a /f $env:WORKSPACEGIT\assets\code-signing-certificate-windows.p12 /p $Env:WINDOWS_CODE_SIGNING /fd sha256 /tr http://timestamp.digicert.com /td sha256"

        if (-not (Test-Path -Path "$RELEASEDIR\Setup.exe" -PathType Leaf) -or ($LastExitCode -ne 0)) {
          echo "ERROR: Squirrel failed to generate the installer! Build aborted."
          if (Test-Path -Path ".\squirrel.windows\tools\SquirrelSetup.log" -PathType Leaf) {
            echo "SquirrelSetup.log: "
            Get-Content -Path .\squirrel.windows\tools\SquirrelSetup.log
          }
          if (Test-Path -Path ".\squirrel.windows\tools\Squirrel-Releasify.log" -PathType Leaf) {
            echo "Squirrel-Releasify.log: "
            Get-Content -Path .\squirrel.windows\tools\Squirrel-Releasify.log
          }
          exit 1
        }
        echo "Installer made."

        echo "RELEASEDIR=${RELEASEDIR}" >> $env:GITHUB_ENV

    - name: (Windows) Upload installer .exe
      if: runner.os == 'Windows'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: Hammer-${{env.SHORT_TAG_NAME}}-installer.exe
        asset_path: ${{env.RELEASEDIR}}\Setup.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: (macOS) Upload installer .app
      if: runner.os == 'macOS'
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: Hammer-${{env.SHORT_TAG_NAME}}-macos.zip
        asset_path: ${{github.workspace}}/publish/Hammer-${{matrix.deployment-platform}}.zip
        asset_content_type: application/zip

    - name: (Windows) Publish to nuget
      # publish only once for all three builds. This update will still work for macOS and Linux
      if: runner.os == 'windows'
      env:
        NUGET_API_KEY: ${{secrets.NUGET_API_KEY}}
      shell: bash
      run: |
        ./create-package.sh
        dotnet nuget push nupkg/Hammer.${{env.SHORT_TAG_NAME}}.nupkg --skip-duplicate --api-key ${{env.NUGET_API_KEY}} --source https://api.nuget.org/v3/index.json

    - name: Setup tmate session should the build fail
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
      with:
        timeout-minutes: 15
        limit-access-to-actor: true
