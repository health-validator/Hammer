name: Publish release

on:
  release:
    types: [created]
  push:

jobs:
  publish-hammer:
    runs-on: windows-latest
    # if: github.repository == 'health-validator/Hammer'
    env:
      buildtype: Release
      TAG_NAME: ${{github.event.release.tag_name}}
      buildname: 'windows'
      qt-version: '5.15.1-7fc8b10'
      dotnet-platform: 'win-x64'
      dotnet-version: 'net5.0'
      deployment-platform: 'windows'
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true

    steps:
    - name: Validate release version
      shell: powershell
      run: |
        # Validate that the version used in the release is one that'll work with all of our tooling
        # Squirrel can be picky: https://github.com/Squirrel/Squirrel.Windows/issues/1394

        if ($env:TAG_NAME -match "^Hammer-(?<Version>\d+(\s*\.\s*\d+){0,3})(?<Release>-[a-z][0-9a-z-]*)?$") {
          $SHORT_TAG_NAME = $Matches.Version
        } else {
          echo "$env:TAG_NAME isn't a valid release name - make sure it matches v#.#.#"
          exit 1
        }

        echo "SHORT_TAG_NAME=${SHORT_TAG_NAME}" >> $env:GITHUB_ENV

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    - name: Checkout source code
      uses: actions/checkout@v2.0.0

    - name: Clone Java validator
      run: git clone --depth 1 --shallow-submodules https://github.com/health-validator/org.hl7.fhir.core

      # build Java first as it's needed by .NET for copying into the publish folder
    - name: Build Java validator
      shell: bash
      run: |
        cd org.hl7.fhir.core
        echo "Git revision of the validator code: $(git rev-parse HEAD)"
        mvn package -Dmaven.test.skip=true --projects org.hl7.fhir.validation.cli --no-transfer-progress
        mv org.hl7.fhir.validation.cli/target/org.hl7.fhir.validation.cli*-SNAPSHOT.jar $GITHUB_WORKSPACE/org.hl7.fhir.validator.jar
        cd $GITHUB_WORKSPACE
        java -jar org.hl7.fhir.validator.jar

    - name: Update version number file
      shell: powershell
      run: |
        $csproj = "Hammer.csproj"
        $regex = '<Version>.+?<\/Version>'
        $replacement = "<Version>$env:SHORT_TAG_NAME</Version>"
        (Get-Content $csproj -Raw) -replace $regex, $replacement | Set-Content $csproj

    - name: Compile Hammer
      run: dotnet publish --configuration ${{env.buildtype}} --runtime win-x64

    - name: Download runtime
      shell: bash
      run: |
        curl --location --output qt-runtime.tar.gz https://github.com/qmlnet/qt-runtimes/releases/download/releases/qt-${{env.qt-version}}-${{env.dotnet-platform}}-runtime.tar.gz
        mkdir -p bin/Release/${{env.dotnet-version}}/${{env.dotnet-platform}}/publish/qt-runtime
        tar -xf qt-runtime.tar.gz -C bin/Release/${{env.dotnet-version}}/${{env.dotnet-platform}}/publish/qt-runtime

    - name: Build installer
      shell: powershell
      env:
        WORKSPACE: ${{runner.workspace}}
        WORKSPACEGIT: ${{runner.workspace}}\Hammer
        SIGNING_PASSWORD: ${{ secrets.SIGNING_CERT }}
      run: |
        $SQUIRRELWIN = "$env:WORKSPACE\squirrel-packaging-prep"
        $SQUIRRELWINBIN = "$SQUIRRELWIN\lib\net45\"
        $RELEASEDIR = "$env:WORKSPACE\finished-installer"
        if (-not $(Test-Path "$SQUIRRELWINBIN")) {
          New-Item "$SQUIRRELWINBIN" -ItemType "directory"
        }
        Move-Item bin\Release\${{env.dotnet-version}}\${{env.dotnet-platform}}\publish\* $SQUIRRELWINBIN
        Copy-Item $env:WORKSPACEGIT\assets\hammer-logo.png $SQUIRRELWIN
        $Script:NuSpec = "$env:WORKSPACEGIT\Hammer.nuspec"

        nuget pack "$Script:NuSpec" -Version "$env:SHORT_TAG_NAME" `
          -BasePath $SQUIRRELWIN -OutputDirectory $SQUIRRELWIN

        $Script:NupkgPath = "$SQUIRRELWIN\Hammer.$env:SHORT_TAG_NAME.nupkg"
        if (-not (Test-Path -Path $Script:NupkgPath -PathType Leaf)) {
          Write-Output "ERROR: nupkg doesn't exist as expected! Build aborted."
          exit 1
        }

        nuget install squirrel.windows -ExcludeVersion

        .\squirrel.windows\tools\Squirrel `
          --releasify $Script:NupkgPath `
          --releaseDir $RELEASEDIR --no-msi `
          --framework-version=462 `
          --setupIcon $env:WORKSPACEGIT\ClinicArrivals\ClinicArrivals.ico `
          --loadingGif=$env:WORKSPACEGIT\assets\hammer-logo.png
          # --signWithParams="/a /f $env:WORKSPACEGIT\codesigningcertificate.p12 /p $Env:SIGNING_PASSWORD /fd sha256 /tr http://timestamp.digicert.com /td sha256"
        if (-not (Test-Path -Path "$RELEASEDIR\Setup.exe" -PathType Leaf)) {
          Write-Output "ERROR: Squirrel failed to generate the installer! Build aborted. Squirrel log is:"
          Get-Content -Path .\squirrel.windows\tools\SquirrelSetup.log
          exit 1
        }
        echo "RELEASEDIR=${RELEASEDIR}" >> $env:GITHUB_ENV
    - name: Upload installer .exe
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_name: Hammer-${{github.event.release.tag_name}}-win.exe
        asset_path: ${{env.RELEASEDIR}}\Setup.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: Setup tmate session
      if: ${{ failure() }}
      uses: mxschmitt/action-tmate@v3
